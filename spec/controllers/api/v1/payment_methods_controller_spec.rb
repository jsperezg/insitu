require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::V1::PaymentMethodsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # PaymentMethod. As you add validations to PaymentMethod, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for :payment_method
  }

  let(:invalid_attributes) {
    { name: nil, note_for_invoice: nil }
  }

  before(:each) do
    @user = User.first || create(:user)
    sign_in @user

    Thread.current[:user] = @user
  end

  after(:each) do
    sign_out @user
  end

  describe "GET #index" do
    it "assigns all payment_methods as @payment_methods" do
      payment_method = PaymentMethod.create! valid_attributes
      get :index, { format: :json }
      expect(assigns(:payment_methods)).to include(payment_method)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new PaymentMethod" do
        expect {
          post :create, { :payment_method => valid_attributes, format: :json }
        }.to change(PaymentMethod, :count).by(1)
      end

      it "assigns a newly created payment_method as @payment_method" do
        post :create, { :payment_method => valid_attributes, format: :json }
        expect(assigns(:payment_method)).to be_a(PaymentMethod)
        expect(assigns(:payment_method)).to be_persisted
      end

      it "returns 200 - ok" do
        post :create, { :payment_method => valid_attributes, format: :json }
        expect(response).to have_http_status(:ok)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved payment_method as @payment_method" do
        post :create, { :payment_method => invalid_attributes, format: :json }
        expect(assigns(:payment_method)).to be_a_new(PaymentMethod)
        expect(assigns(:payment_method)).not_to be_persisted
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        attributes_for :payment_method
      }

      it "updates the requested payment_method" do
        payment_method = PaymentMethod.create! valid_attributes
        put :update, { :id => payment_method.to_param, :payment_method => new_attributes, format: :json }
        payment_method.reload
        expect(payment_method[:name]).to eq(new_attributes[:name])
        expect(payment_method[:note_for_invoice]).to eq(new_attributes[:note_for_invoice])
      end

      it "assigns the requested payment_method as @payment_method" do
        payment_method = PaymentMethod.create! valid_attributes
        put :update, { :id => payment_method.to_param, :payment_method => valid_attributes, format: :json }
        expect(assigns(:payment_method)).to eq(payment_method)
      end

      it "returns 200 - ok" do
        payment_method = PaymentMethod.create! valid_attributes
        put :update, { :id => payment_method.to_param, :payment_method => valid_attributes, format: :json }
        expect(response).to have_http_status(:ok)
      end
    end

    context "with invalid params" do
      it "assigns the payment_method as @payment_method" do
        payment_method = PaymentMethod.create! valid_attributes
        put :update, { :id => payment_method.to_param, :payment_method => invalid_attributes, format: :json}
        expect(assigns(:payment_method)).to eq(payment_method)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested payment_method" do
      payment_method = PaymentMethod.create! valid_attributes
      expect {
        delete :destroy, { :id => payment_method.to_param, format: :json }
      }.to change(PaymentMethod, :count).by(-1)
    end

    it "returns 200 - ok" do
      payment_method = PaymentMethod.create! valid_attributes
      delete :destroy, { :id => payment_method.to_param, format: :json }
      expect(response).to have_http_status(:ok)
    end
  end

end
